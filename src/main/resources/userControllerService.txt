package com.booking_app.controller;

import com.booking_app.Dto.UserDto;
import com.booking_app.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;

@RestController
@RequestMapping("/api/users")
public class UserController {

    @Autowired
    private UserService userService;

    // Registration (Sign Up)
    @PostMapping("/register")
    public ResponseEntity<UserDto> register(@Valid @RequestBody UserDto userDto) {
        try {
            String msg = userService.registerUser(userDto);
            userDto.setMsg(msg);
            return ResponseEntity.ok(userDto);
        } catch (Exception e) {
            userDto.setMsg("Error while registering: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(userDto);
        }
    }

    // Login (Authentication)
    @PostMapping("/login")
    public ResponseEntity<UserDto> login(@Valid @RequestBody UserDto userDto) {
        try {
            String token = userService.login(userDto);
            userDto.setToken(token);  // Set JWT Token
            return ResponseEntity.ok(userDto);
        } catch (Exception e) {
            userDto.setMsg("Login failed: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(userDto);
        }
    }

    // Update User Information
    @PutMapping("/{userId}")
    @PreAuthorize("hasAnyRole('ADMIN', 'MANAGER')")  // Example: only ADMIN or MANAGER can update
    public ResponseEntity<UserDto> updateUser(@PathVariable Long userId, @Valid @RequestBody UserDto userDto) {
        try {
            String msg = userService.updateUser(userId, userDto);
            userDto.setMsg(msg);
            return ResponseEntity.ok(userDto);
        } catch (Exception e) {
            userDto.setMsg("Error while updating user: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(userDto);
        }
    }

    // Delete User
    @DeleteMapping("/{userId}")
    @PreAuthorize("hasRole('ADMIN')")  // Example: only ADMIN can delete a user
    public ResponseEntity<String> deleteUser(@PathVariable Long userId) {
        try {
            String msg = userService.deleteUser(userId);
            return ResponseEntity.ok(msg);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error while deleting user: " + e.getMessage());
        }
    }

    // Get User by ID
    @GetMapping("/{userId}")
    public ResponseEntity<UserDto> getUserById(@PathVariable Long userId) {
        try {
            UserDto userDto = userService.getUserById(userId);
            return ResponseEntity.ok(userDto);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);
        }
    }

    // Get User by Username (For login or display)
    @GetMapping("/username/{username}")
    public ResponseEntity<UserDto> getUserByUsername(@PathVariable String username) {
        try {
            UserDto userDto = userService.getUserByUsername(username);
            return ResponseEntity.ok(userDto);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);
        }
    }

    // Reset Password (Forgot Password)
    @PostMapping("/reset-password")
    public ResponseEntity<String> resetPassword(@RequestParam String usernameOrEmail, @RequestParam String newPassword) {
        try {
            String msg = userService.resetPassword(usernameOrEmail, newPassword);
            return ResponseEntity.ok(msg);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error while resetting password: " + e.getMessage());
        }
    }

    // Get All Users (Admin-only)
    @GetMapping("/all")
    @PreAuthorize("hasRole('ADMIN')")  // Only admins can get all users
    public ResponseEntity<List<UserDto>> getAllUsers() {
        try {
            List<UserDto> users = userService.getAllUsers();
            return ResponseEntity.ok(users);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
        }
    }

    // Change User Role (Admin only)
    @PutMapping("/change-role/{userId}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<String> changeUserRole(@PathVariable Long userId, @RequestParam String role) {
        try {
            String msg = userService.changeUserRole(userId, role);
            return ResponseEntity.ok(msg);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error while changing user role: " + e.getMessage());
        }
    }

    // Lock User (Admin only)
    @PostMapping("/lock/{userId}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<String> lockUser(@PathVariable Long userId) {
        try {
            String msg = userService.lockUser(userId);
            return ResponseEntity.ok(msg);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error while locking user: " + e.getMessage());
        }
    }

    // Unlock User (Admin only)
    @PostMapping("/unlock/{userId}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<String> unlockUser(@PathVariable Long userId) {
        try {
            String msg = userService.unlockUser(userId);
            return ResponseEntity.ok(msg);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error while unlocking user: " + e.getMessage());
        }
    }
}





package com.booking_app.service;

import com.booking_app.Dto.UserDto;
import com.booking_app.entity.User;
import com.booking_app.repository.UserRepository;
import com.booking_app.exceptions.UserNotFoundException;
import com.booking_app.exceptions.UsernameAlreadyExistsException;
import com.booking_app.exceptions.EmailAlreadyExistsException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import javax.transaction.Transactional;
import java.util.List;
import java.util.Optional;

@Service
public class UserService {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private PasswordEncoder passwordEncoder; // Make sure to use BCrypt or any suitable encoder

    @Transactional
    public String registerUser(UserDto userDto) {
        // Check if the username already exists
        if (userRepository.existsByUsername(userDto.getUsername())) {
            throw new UsernameAlreadyExistsException("Username is already taken.");
        }
        
        // Check if the email already exists
        if (userRepository.existsByEmail(userDto.getEmail())) {
            throw new EmailAlreadyExistsException("Email is already registered.");
        }

        // Encrypt the password
        String encryptedPassword = passwordEncoder.encode(userDto.getPassword());

        // Convert UserDto to User entity
        User user = new User();
        user.setUsername(userDto.getUsername());
        user.setPassword(encryptedPassword);
        user.setEmail(userDto.getEmail());
        user.setMobile(userDto.getMobile());
        user.setFirstName(userDto.getFirstName());
        user.setLastName(userDto.getLastName());
        user.setAge(userDto.getAge());
        user.setGender(userDto.getGender());
        user.setStreet(userDto.getStreet());
        user.setCity(userDto.getCity());
        user.setPincode(userDto.getPincode());
        user.setUpdatedAt(userDto.getUpdatedAt());

        // Save user to the database
        userRepository.save(user);
        
        return "User registered successfully.";
    }

    public String login(UserDto userDto) {
        Optional<User> userOptional = userRepository.findByUsername(userDto.getUsername());

        if (!userOptional.isPresent()) {
            throw new UserNotFoundException("User not found with username: " + userDto.getUsername());
        }

        User user = userOptional.get();

        // Check if the password matches
        if (!passwordEncoder.matches(userDto.getPassword(), user.getPassword())) {
            throw new RuntimeException("Invalid password.");
        }

        // Generate and return the JWT Token here (for simplicity, assuming it's returned as a string)
        String token = "dummy-jwt-token";  // In a real scenario, generate a JWT token here
        return token;
    }

    @Transactional
    public String updateUser(Long userId, UserDto userDto) {
        // Fetch the user from the database
        Optional<User> userOptional = userRepository.findById(userId);
        if (!userOptional.isPresent()) {
            throw new UserNotFoundException("User not found with id: " + userId);
        }

        User user = userOptional.get();

        // Update the user details
        user.setUsername(userDto.getUsername());
        user.setPassword(passwordEncoder.encode(userDto.getPassword()));  // Re-encrypt the password
        user.setEmail(userDto.getEmail());
        user.setMobile(userDto.getMobile());
        user.setFirstName(userDto.getFirstName());
        user.setLastName(userDto.getLastName());
        user.setAge(userDto.getAge());
        user.setGender(userDto.getGender());
        user.setStreet(userDto.getStreet());
        user.setCity(userDto.getCity());
        user.setPincode(userDto.getPincode());
        user.setUpdatedAt(userDto.getUpdatedAt());

        // Save the updated user back to the database
        userRepository.save(user);
        
        return "User updated successfully.";
    }

    @Transactional
    public String deleteUser(Long userId) {
        // Fetch the user from the database
        Optional<User> userOptional = userRepository.findById(userId);
        if (!userOptional.isPresent()) {
            throw new UserNotFoundException("User not found with id: " + userId);
        }

        // Delete the user
        userRepository.deleteById(userId);
        
        return "User deleted successfully.";
    }

    public UserDto getUserById(Long userId) {
        Optional<User> userOptional = userRepository.findById(userId);
        if (!userOptional.isPresent()) {
            throw new UserNotFoundException("User not found with id: " + userId);
        }

        User user = userOptional.get();
        
        // Convert User entity to UserDto
        UserDto userDto = new UserDto();
        userDto.setUsername(user.getUsername());
        userDto.setEmail(user.getEmail());
        userDto.setMobile(user.getMobile());
        userDto.setFirstName(user.getFirstName());
        userDto.setLastName(user.getLastName());
        userDto.setAge(user.getAge());
        userDto.setGender(user.getGender());
        userDto.setStreet(user.getStreet());
        userDto.setCity(user.getCity());
        userDto.setPincode(user.getPincode());
        userDto.setUpdatedAt(user.getUpdatedAt());

        return userDto;
    }

    public UserDto getUserByUsername(String username) {
        Optional<User> userOptional = userRepository.findByUsername(username);
        if (!userOptional.isPresent()) {
            throw new UserNotFoundException("User not found with username: " + username);
        }

        User user = userOptional.get();
        
        // Convert User entity to UserDto
        UserDto userDto = new UserDto();
        userDto.setUsername(user.getUsername());
        userDto.setEmail(user.getEmail());
        userDto.setMobile(user.getMobile());
        userDto.setFirstName(user.getFirstName());
        userDto.setLastName(user.getLastName());
        userDto.setAge(user.getAge());
        userDto.setGender(user.getGender());
        userDto.setStreet(user.getStreet());
        userDto.setCity(user.getCity());
        userDto.setPincode(user.getPincode());
        userDto.setUpdatedAt(user.getUpdatedAt());

        return userDto;
    }

    public String resetPassword(String usernameOrEmail, String newPassword) {
        Optional<User> userOptional = userRepository.findByUsername(usernameOrEmail);
        
        if (!userOptional.isPresent()) {
            userOptional = userRepository.findByEmail(usernameOrEmail);
        }

        if (!userOptional.isPresent()) {
            throw new UserNotFoundException("No user found with the given username/email.");
        }

        User user = userOptional.get();
        
        // Encrypt and update password
        user.setPassword(passwordEncoder.encode(newPassword));
        
        // Save updated user
        userRepository.save(user);
        
        return "Password reset successfully.";
    }

    public List<UserDto> getAllUsers() {
        List<User> users = userRepository.findAll();
        
        // Convert List of User entities to List of UserDto
        return users.stream().map(user -> {
            UserDto userDto = new UserDto();
            userDto.setUsername(user.getUsername());
            userDto.setEmail(user.getEmail());
            userDto.setMobile(user.getMobile());
            userDto.setFirstName(user.getFirstName());
            userDto.setLastName(user.getLastName());
            userDto.setAge(user.getAge());
            userDto.setGender(user.getGender());
            userDto.setStreet(user.getStreet());
            userDto.setCity(user.getCity());
            userDto.setPincode(user.getPincode());
            userDto.setUpdatedAt(user.getUpdatedAt());
            return userDto;
        }).collect(Collectors.toList());
    }

    public String changeUserRole(Long userId, String role) {
        Optional<User> userOptional = userRepository.findById(userId);
        if (!userOptional.isPresent()) {
            throw new UserNotFoundException("User not found with id: " + userId);
        }

        User user = userOptional.get();

        // Assuming you have a roles system, you can add logic to change the role
        user.setRole(role);
        userRepository.save(user);

        return "User role changed to: " + role;
    }

    public String lockUser(Long userId) {
        Optional<User> userOptional = userRepository.findById(userId);
        if (!userOptional.isPresent()) {
            throw new UserNotFoundException("User not found with id: " + userId);
        }

        User user = userOptional.get();
        user.setLocked(true);  // Assuming there's a 'locked' field in your User entity
        userRepository.save(user);

        return "User locked successfully.";
    }

    public String unlockUser(Long userId) {
        Optional<User> userOptional = userRepository.findById(userId);
        if (!userOptional.isPresent()) {
            throw new UserNotFoundException("User not found with id: " + userId);
        }

        User user = userOptional.get();
        user.setLocked(false);  // Assuming there's a 'locked' field in your User entity
        userRepository.save(user);

        return "User unlocked successfully.";
    }
}